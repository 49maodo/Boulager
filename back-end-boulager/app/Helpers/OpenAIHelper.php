<?php

// app/Helpers/OpenAIHelper.php - Version am√©lior√©e

namespace App\Helpers;

use OpenAI;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Cache;

class OpenAIHelper
{
    /**
     * G√©n√©rer une r√©ponse IA avec gestion du rate limiting
     */

    public static function genererReponse(int $userId, string $messageUtilisateur): ?string
    {
        try {
            Log::info('D√©but g√©n√©ration r√©ponse IA', [
                'user_id' => $userId,
                'message' => $messageUtilisateur
            ]);

            // V√©rifier la configuration
            $apiKey = config('services.openai.api_key');
            if (!$apiKey || $apiKey === '*******') {
                Log::error('Cl√© API OpenAI manquante ou non configur√©e');
                return "Configuration OpenAI en cours. Notre √©quipe technique finalise la mise en place du service.";
            }

            // Cache pour √©viter les appels r√©p√©titifs
            $cacheKey = 'openai_response_' . md5($messageUtilisateur . date('Y-m-d-H'));
            $cachedResponse = Cache::get($cacheKey);

            if ($cachedResponse) {
                Log::info('R√©ponse trouv√©e en cache');
                return $cachedResponse;
            }

            // V√©rifier le rate limit global
            $globalRateKey = 'openai_global_rate_' . date('Y-m-d-H-i');
            $globalCount = Cache::get($globalRateKey, 0);

            if ($globalCount >= 2) { // Tr√®s conservateur : 2 appels par minute max
                Log::warning('Rate limit global pr√©ventif', [
                    'global_count' => $globalCount,
                    'minute' => date('Y-m-d-H-i')
                ]);
                return self::getFallbackResponse($messageUtilisateur);
            }

            // Essayer l'appel OpenAI avec des param√®tres tr√®s conservateurs
            Log::info('Tentative appel OpenAI conservatif...');

            $client = OpenAI::client($apiKey);

            // Messages simplifi√©s
            $messages = [
                [
                    'role' => 'system',
                    'content' => 'Tu es un assistant support. R√©ponds tr√®s bri√®vement en fran√ßais.'
                ],
                [
                    'role' => 'user',
                    'content' => substr($messageUtilisateur, 0, 100) // Limiter la taille
                ]
            ];

            // Param√®tres tr√®s conservateurs
            $response = $client->chat()->create([
                'model' => 'gpt-3.5-turbo',
                'messages' => $messages,
                'max_tokens' => 100, // Tr√®s faible
                'temperature' => 0.3, // Tr√®s d√©terministe
            ]);

            $reponse = $response->choices[0]->message->content ?? null;

            if ($reponse) {
                // Incr√©menter APR√àS succ√®s
                Cache::put($globalRateKey, $globalCount + 1, 60);

                // Cache plus long pour r√©duire les appels
                Cache::put($cacheKey, $reponse, 1800); // 30 minutes

                Log::info('R√©ponse OpenAI r√©ussie', [
                    'response_length' => strlen($reponse),
                    'global_count' => $globalCount + 1
                ]);

                return $reponse;
            }

            return self::getFallbackResponse($messageUtilisateur);

        } catch (\Exception $e) {
            Log::error('Erreur OpenAI compl√®te', [
                'user_id' => $userId,
                'message' => $messageUtilisateur,
                'error' => $e->getMessage(),
                'code' => $e->getCode(),
                'trace' => $e->getTraceAsString()
            ]);

            return self::handleOpenAIError($e, $userId, $messageUtilisateur);
        }
    }

    private static function getFallbackResponse(string $message): string
    {
        $messageLower = strtolower($message);

        // D√©tection de patterns pour r√©ponses intelligentes
        if (strpos($messageLower, 'bonjour') !== false || strpos($messageLower, 'salut') !== false || strpos($messageLower, 'slt') !== false) {
            return "Bonjour ! Je suis votre assistant support. Comment puis-je vous aider aujourd'hui ? üòä";
        }

        if (strpos($messageLower, 'probl√®me') !== false || strpos($messageLower, 'bug') !== false) {
            return "Je comprends que vous rencontrez un probl√®me. Pouvez-vous me donner plus de d√©tails ? Notre √©quipe technique est √©galement disponible pour vous aider.";
        }

        if (strpos($messageLower, 'commande') !== false || strpos($messageLower, 'livraison') !== false) {
            return "Pour les questions concernant vos commandes et livraisons, je vous recommande de contacter notre service client qui pourra acc√©der √† vos informations personnelles.";
        }

        if (strpos($messageLower, 'prix') !== false || strpos($messageLower, 'co√ªt') !== false || strpos($messageLower, 'tarif') !== false) {
            return "Pour les informations tarifaires actualis√©es, je vous invite √† consulter notre site web ou contacter notre √©quipe commerciale qui pourra vous renseigner pr√©cis√©ment.";
        }

        if (strpos($messageLower, 'merci') !== false) {
            return "Je vous en prie ! N'h√©sitez pas si vous avez d'autres questions. üòä";
        }

        if (strpos($messageLower, 'au revoir') !== false || strpos($messageLower, 'bye') !== false) {
            return "Au revoir et bonne journ√©e ! N'h√©sitez pas √† revenir si vous avez besoin d'aide. üëã";
        }

        // R√©ponse par d√©faut
        return "Merci pour votre message. Pour vous offrir la meilleure assistance possible, un membre de notre √©quipe support va prendre en charge votre demande. Vous recevrez une r√©ponse personnalis√©e sous peu. üí¨";
    }

    /**
     * G√©rer les erreurs OpenAI avec messages appropri√©s
     */
    private static function handleOpenAIError(\Exception $e, int $userId, string $messageUtilisateur): string
    {
        $errorMessage = $e->getMessage();

        if (strpos($errorMessage, 'rate limit') !== false) {
            // Marquer globalement pour √©viter d'autres appels
            Cache::put('openai_global_blocked', true, 300); // 5 minutes

            Log::warning('Rate limit OpenAI d√©tect√©, utilisation du fallback intelligent');
            return self::getFallbackResponse($messageUtilisateur);
        }

        if (strpos($errorMessage, 'API key') !== false) {
            Log::error('Probl√®me cl√© API OpenAI');
            return "Service temporairement indisponible. Notre √©quipe technique travaille √† r√©soudre ce probl√®me. En attendant, notre support humain peut vous aider ! üîß";
        }

        if (strpos($errorMessage, 'quota') !== false || strpos($errorMessage, 'billing') !== false) {
            Log::error('Probl√®me quota/billing OpenAI');
            Cache::put('openai_global_blocked', true, 3600); // 1 heure
            return "Notre service IA est temporairement suspendu pour maintenance. Notre √©quipe support humain prend le relais pour vous assister ! üë§";
        }

        // Erreur g√©n√©rale
        return self::getFallbackResponse($messageUtilisateur);
    }

    /**
     * V√©rifier si OpenAI est actuellement rate limited
     */
    public static function isRateLimited(): bool
    {
        return Cache::has('openai_rate_limited');
    }

    /**
     * V√©rifier si OpenAI est bloqu√©
     */
    public static function isBlocked(): bool
    {
        return Cache::has('openai_global_blocked');
    }

    /**
     * V√©rifier si intervention humaine n√©cessaire
     */
    public static function necessiteInterventionHumaine(string $message): bool
    {
        // Si OpenAI est bloqu√©, toujours passer en humain pour les cas complexes
        if (self::isBlocked()) {
            // Mais utiliser le fallback intelligent pour les cas simples
            $messageLower = strtolower($message);
            $motsSimples = ['bonjour', 'salut', 'slt', 'merci', 'au revoir', 'bye'];

            foreach ($motsSimples as $mot) {
                if (strpos($messageLower, $mot) !== false) {
                    return false; // Utiliser le fallback
                }
            }

            return true; // Passer en humain pour le reste
        }

        $motsClesUrgents = [
            'urgent', 'probl√®me grave', 'bug critique',
            'remboursement', 'annulation', 'r√©clamation',
            'manager', 'responsable', 'plainte', 'insatisfait',
            'avocat', 'tribunal', 'juridique', 'facturation'
        ];

        $messageLower = strtolower($message);

        foreach ($motsClesUrgents as $motCle) {
            if (strpos($messageLower, $motCle) !== false) {
                Log::info('Mot-cl√© urgent d√©tect√©', ['keyword' => $motCle]);
                return true;
            }
        }

        return false;
    }

    /**
     * Obtenir le prompt syst√®me
     */
    private static function getSystemPrompt(): string
    {
        return "Tu es un assistant support client amical et professionnel.

        R√®gles importantes :
        - R√©ponds en fran√ßais de mani√®re concise (max 100 mots)
        - Sois poli et empathique
        - Si tu ne peux pas aider pr√©cis√©ment, recommande le support humain
        - Pour les questions techniques complexes, dirige vers l'√©quipe technique
        - Utilise des emojis occasionnellement pour rendre la conversation plus chaleureuse

        Tu peux aider avec :
        - Questions g√©n√©rales sur les produits
        - Probl√®mes techniques simples
        - Guidance et orientation
        - Information sur les processus

        √âvite de :
        - Donner des informations sur les prix sans v√©rification
        - Promettre des remboursements ou modifications de compte
        - Traiter les r√©clamations complexes (transfert vers humain)";
    }

    /**
     * Nettoyer les caches en cas de besoin
     */
    public static function clearRateLimit(): void
    {
        foreach (range(0, 59) as $minute) {
            $key = 'openai_rate_limit_' . date('Y-m-d-H') . '-' . str_pad($minute, 2, '0', STR_PAD_LEFT);
            Cache::forget($key);
        }

        Log::info('Tous les caches rate limit OpenAI ont √©t√© nettoy√©s');
    }

    public static function getStats(): array
    {
        return [
            'global_blocked' => self::isBlocked(),
            'current_minute_calls' => Cache::get('openai_global_rate_' . date('Y-m-d-H-i'), 0),
            'api_key_configured' => !empty(config('services.openai.api_key')) && config('services.openai.api_key') !== '*******'
        ];
    }

    /**
     * Nettoyer tous les bloquages (pour debug)
     */
    public static function clearAllBlocks(): void
    {
        Cache::forget('openai_global_blocked');
        Cache::forget('openai_global_rate_' . date('Y-m-d-H-i'));
        Log::info('Tous les bloquages OpenAI ont √©t√© nettoy√©s');
    }
}
